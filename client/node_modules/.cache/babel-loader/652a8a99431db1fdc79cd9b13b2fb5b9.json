{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyD6BI2lUEz9UPxtULpQSDBTG1-Qi27HShc\",\n  authDomain: \"e-commerce-656c9.firebaseapp.com\",\n  databaseURL: \"https://e-commerce-656c9.firebaseio.com\",\n  projectId: \"e-commerce-656c9\",\n  storageBucket: \"e-commerce-656c9.appspot.com\",\n  messagingSenderId: \"60777674622\",\n  appId: \"1:60777674622:web:01886a0a8beda0952ce52f\",\n  measurementId: \"G-NPKM33SNE2\"\n};\nfirebase.initializeApp(config);\nexport const createUserProfileDocument = async (userAuth, addtionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...addtionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\n/*promise based checking user authentication  */\n\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscibe = auth.onAuthStateChanged(userAuth);\n  });\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  /*adding shop data to redux*/\n\n  return transformedCollection.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\nexport default firebase;","map":{"version":3,"sources":["E:/react/frontend/ecommerce/src/firebase/firebase.util.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","addtionalData","userRef","firestore","doc","uid","snapshot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","getCurrentUser","Promise","resolve","reject","unsubscibe","auth","onAuthStateChanged","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","reduce","accumulator","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst config={\r\n    apiKey: \"AIzaSyD6BI2lUEz9UPxtULpQSDBTG1-Qi27HShc\",\r\n    authDomain: \"e-commerce-656c9.firebaseapp.com\",\r\n    databaseURL: \"https://e-commerce-656c9.firebaseio.com\",\r\n    projectId: \"e-commerce-656c9\",\r\n    storageBucket: \"e-commerce-656c9.appspot.com\",\r\n    messagingSenderId: \"60777674622\",\r\n    appId: \"1:60777674622:web:01886a0a8beda0952ce52f\",\r\n    measurementId: \"G-NPKM33SNE2\"\r\n};\r\n  \r\nfirebase.initializeApp(config);\r\n\r\nexport const createUserProfileDocument = async (userAuth, addtionalData) => {\r\n    if (!userAuth) return;\r\n\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    \r\n    const snapshot = await userRef.get();\r\n\r\n    if (!snapshot.exists) {\r\n        const { displayName, email } = userAuth;\r\n        const createdAt = new Date();\r\n\r\n        try {\r\n            await userRef.set({\r\n                displayName,\r\n                email,\r\n                createdAt,\r\n                ...addtionalData\r\n            })\r\n        } catch (error) {\r\n            console.log('error creating user', error.message);\r\n        }\r\n    }\r\n\r\n    return userRef;\r\n};\r\n\r\nexport const addCollectionAndDocuments = async(collectionKey, objectsToAdd) => {\r\n    const collectionRef = firestore.collection(collectionKey);\r\n   \r\n    const batch = firestore.batch();\r\n    objectsToAdd.forEach(obj => {\r\n        const newDocRef = collectionRef.doc();\r\n        batch.set(newDocRef, obj);\r\n    });\r\n\r\n    return await batch.commit();\r\n};\r\n/*promise based checking user authentication  */\r\nexport const getCurrentUser = () => {\r\n    return new Promise((resolve, reject) => {\r\n        const unsubscibe=auth.onAuthStateChanged(userAuth)\r\n    })\r\n}\r\n\r\n\r\nexport const auth = firebase.auth();\r\nexport const firestore = firebase.firestore();\r\n\r\n\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n    const transformedCollection = collections.docs.map(doc => {\r\n        const { title, items } = doc.data();\r\n\r\n        return {\r\n            routeName: encodeURI(title.toLowerCase()),\r\n            id: doc.id,\r\n            title,\r\n            items\r\n        }\r\n    });\r\n    /*adding shop data to redux*/ \r\n    return transformedCollection.reduce((accumulator, collection) => {\r\n        accumulator[collection.title.toLowerCase()] = collection;\r\n        return accumulator;\r\n    }, {});\r\n};\r\n\r\n\r\n\r\n\r\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({ prompt: 'select_account' });\r\nexport const signInWithGoogle = () => auth.signInWithPopup(googleProvider);\r\n\r\nexport default firebase;"]},"metadata":{},"sourceType":"module"}